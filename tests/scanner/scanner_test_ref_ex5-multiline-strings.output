EOL
KEYWORD import
STRING_LITERAL ifj25
KEYWORD for
KEYWORD ifj
EOL
KEYWORD class
IDENTIFIER Program
LEFT_BRACE '{'
EOL
KEYWORD static
IDENTIFIER main
LEFT_PAREN '('
RIGHT_PAREN ')'
LEFT_BRACE '{'
EOL
KEYWORD var
IDENTIFIER s
EOL
EOL
GLOBAL_VAR d
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
STRING_LITERAL === Priklady nize se vytisknou stejne: ===

RIGHT_PAREN ')'
EOL
EOL
EOL
IDENTIFIER s
OP_ASSIGN '='
STRING_LITERAL ahoj
EOL
GLOBAL_VAR d
OP_ASSIGN '='
IDENTIFIER printChars
LEFT_PAREN '('
IDENTIFIER s
RIGHT_PAREN ')'
EOL
EOL
EOL
EOL
IDENTIFIER s
OP_ASSIGN '='
STRING_LITERAL ahoj
    
EOL
GLOBAL_VAR d
OP_ASSIGN '='
IDENTIFIER printChars
LEFT_PAREN '('
IDENTIFIER s
RIGHT_PAREN ')'
EOL
EOL
EOL
EOL
IDENTIFIER s
OP_ASSIGN '='
STRING_LITERAL      
ahoj
EOL
GLOBAL_VAR d
OP_ASSIGN '='
IDENTIFIER printChars
LEFT_PAREN '('
IDENTIFIER s
RIGHT_PAREN ')'
EOL
EOL
EOL
EOL
IDENTIFIER s
OP_ASSIGN '='
STRING_LITERAL 		
ahoj

EOL
GLOBAL_VAR d
OP_ASSIGN '='
IDENTIFIER printChars
LEFT_PAREN '('
IDENTIFIER s
RIGHT_PAREN ')'
EOL
EOL
EOL
EOL
IDENTIFIER s
OP_ASSIGN '='
STRING_LITERAL 		
ahoj
      
EOL
GLOBAL_VAR d
OP_ASSIGN '='
IDENTIFIER printChars
LEFT_PAREN '('
IDENTIFIER s
RIGHT_PAREN ')'
EOL
EOL
GLOBAL_VAR d
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
STRING_LITERAL 
=== Dalsi priklady: ===

RIGHT_PAREN ')'
EOL
EOL
EOL
IDENTIFIER s
OP_ASSIGN '='
STRING_LITERAL   	  ahoj
EOL
GLOBAL_VAR d
OP_ASSIGN '='
IDENTIFIER printChars
LEFT_PAREN '('
IDENTIFIER s
RIGHT_PAREN ')'
EOL
EOL
EOL
IDENTIFIER s
OP_ASSIGN '='
STRING_LITERAL ahoj
    x 
EOL
GLOBAL_VAR d
OP_ASSIGN '='
IDENTIFIER printChars
LEFT_PAREN '('
IDENTIFIER s
RIGHT_PAREN ')'
EOL
EOL
EOL
EOL
IDENTIFIER s
OP_ASSIGN '='
STRING_LITERAL     
    
ahoj
EOL
GLOBAL_VAR d
OP_ASSIGN '='
IDENTIFIER printChars
LEFT_PAREN '('
IDENTIFIER s
RIGHT_PAREN ')'
EOL
EOL
EOL
EOL
IDENTIFIER s
OP_ASSIGN '='
STRING_LITERAL ahoj
        
        
EOL
GLOBAL_VAR d
OP_ASSIGN '='
IDENTIFIER printChars
LEFT_PAREN '('
IDENTIFIER s
RIGHT_PAREN ')'
EOL
RIGHT_BRACE '}'
EOL
EOL
EOL
KEYWORD static
IDENTIFIER printChars
LEFT_PAREN '('
IDENTIFIER s
RIGHT_PAREN ')'
LEFT_BRACE '{'
EOL
KEYWORD var
IDENTIFIER l
EOL
IDENTIFIER l
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER length
LEFT_PAREN '('
IDENTIFIER s
RIGHT_PAREN ')'
EOL
KEYWORD var
IDENTIFIER i
EOL
IDENTIFIER i
OP_ASSIGN '='
NUM_INT 0
EOL
KEYWORD var
IDENTIFIER char
EOL
KEYWORD while
LEFT_PAREN '('
IDENTIFIER i
OP_LESS_THAN '<'
IDENTIFIER l
RIGHT_PAREN ')'
LEFT_BRACE '{'
EOL
IDENTIFIER char
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER ord
LEFT_PAREN '('
IDENTIFIER s
COMMA ','
IDENTIFIER i
RIGHT_PAREN ')'
EOL
KEYWORD if
LEFT_PAREN '('
IDENTIFIER char
OP_LESS_THAN '<'
NUM_INT 100
RIGHT_PAREN ')'
LEFT_BRACE '{'
EOL
KEYWORD if
LEFT_PAREN '('
IDENTIFIER char
OP_GREATER_THAN_EQUAL '>='
NUM_INT 10
RIGHT_PAREN ')'
LEFT_BRACE '{'
EOL
GLOBAL_VAR d
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
STRING_LITERAL  
RIGHT_PAREN ')'
EOL
RIGHT_BRACE '}'
KEYWORD else
LEFT_BRACE '{'
EOL
GLOBAL_VAR d
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
STRING_LITERAL   
RIGHT_PAREN ')'
EOL
RIGHT_BRACE '}'
EOL
RIGHT_BRACE '}'
KEYWORD else
LEFT_BRACE '{'
EOL
RIGHT_BRACE '}'
EOL
GLOBAL_VAR d
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
IDENTIFIER char
RIGHT_PAREN ')'
EOL
KEYWORD if
LEFT_PAREN '('
IDENTIFIER i
OP_NOT_EQUALS '!='
IDENTIFIER l
OP_SUB '-'
NUM_INT 1
RIGHT_PAREN ')'
LEFT_BRACE '{'
EOL
GLOBAL_VAR d
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
STRING_LITERAL , 
RIGHT_PAREN ')'
EOL
RIGHT_BRACE '}'
KEYWORD else
LEFT_BRACE '{'
EOL
GLOBAL_VAR d
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
STRING_LITERAL 

RIGHT_PAREN ')'
EOL
RIGHT_BRACE '}'
EOL
IDENTIFIER i
OP_ASSIGN '='
IDENTIFIER i
OP_ADD '+'
NUM_INT 1
EOL
RIGHT_BRACE '}'
EOL
IDENTIFIER l
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER length
LEFT_PAREN '('
IDENTIFIER s
RIGHT_PAREN ')'
EOL
IDENTIFIER i
OP_ASSIGN '='
NUM_INT 0
EOL
KEYWORD while
LEFT_PAREN '('
IDENTIFIER i
OP_LESS_THAN '<'
IDENTIFIER l
RIGHT_PAREN ')'
LEFT_BRACE '{'
EOL
IDENTIFIER char
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER ord
LEFT_PAREN '('
IDENTIFIER s
COMMA ','
IDENTIFIER i
RIGHT_PAREN ')'
EOL
KEYWORD if
LEFT_PAREN '('
IDENTIFIER char
OP_LESS_THAN '<'
NUM_INT 32
RIGHT_PAREN ')'
LEFT_BRACE '{'
EOL
KEYWORD if
LEFT_PAREN '('
IDENTIFIER char
OP_EQUALS '=='
NUM_INT 10
RIGHT_PAREN ')'
LEFT_BRACE '{'
EOL
GLOBAL_VAR d
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
STRING_LITERAL  \n
RIGHT_PAREN ')'
EOL
RIGHT_BRACE '}'
KEYWORD else
LEFT_BRACE '{'
EOL
KEYWORD if
LEFT_PAREN '('
IDENTIFIER char
OP_EQUALS '=='
NUM_INT 13
RIGHT_PAREN ')'
LEFT_BRACE '{'
EOL
GLOBAL_VAR d
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
STRING_LITERAL  \r
RIGHT_PAREN ')'
EOL
RIGHT_BRACE '}'
KEYWORD else
LEFT_BRACE '{'
EOL
KEYWORD if
LEFT_PAREN '('
IDENTIFIER char
OP_EQUALS '=='
NUM_INT 9
RIGHT_PAREN ')'
LEFT_BRACE '{'
EOL
GLOBAL_VAR d
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
STRING_LITERAL  \t
RIGHT_PAREN ')'
EOL
RIGHT_BRACE '}'
KEYWORD else
LEFT_BRACE '{'
EOL
GLOBAL_VAR d
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
STRING_LITERAL   -
RIGHT_PAREN ')'
EOL
RIGHT_BRACE '}'
EOL
RIGHT_BRACE '}'
EOL
RIGHT_BRACE '}'
EOL
RIGHT_BRACE '}'
KEYWORD else
LEFT_BRACE '{'
EOL
KEYWORD if
LEFT_PAREN '('
IDENTIFIER char
OP_EQUALS '=='
NUM_INT 32
RIGHT_PAREN ')'
LEFT_BRACE '{'
EOL
GLOBAL_VAR d
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
STRING_LITERAL ___
RIGHT_PAREN ')'
EOL
RIGHT_BRACE '}'
KEYWORD else
LEFT_BRACE '{'
EOL
GLOBAL_VAR d
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
STRING_LITERAL   
RIGHT_PAREN ')'
EOL
IDENTIFIER char
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER chr
LEFT_PAREN '('
IDENTIFIER char
RIGHT_PAREN ')'
EOL
GLOBAL_VAR d
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
IDENTIFIER char
RIGHT_PAREN ')'
EOL
RIGHT_BRACE '}'
EOL
RIGHT_BRACE '}'
EOL
KEYWORD if
LEFT_PAREN '('
IDENTIFIER i
OP_NOT_EQUALS '!='
IDENTIFIER l
OP_SUB '-'
NUM_INT 1
RIGHT_PAREN ')'
LEFT_BRACE '{'
EOL
GLOBAL_VAR d
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
STRING_LITERAL , 
RIGHT_PAREN ')'
EOL
RIGHT_BRACE '}'
KEYWORD else
LEFT_BRACE '{'
EOL
GLOBAL_VAR d
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
STRING_LITERAL 

RIGHT_PAREN ')'
EOL
RIGHT_BRACE '}'
EOL
IDENTIFIER i
OP_ASSIGN '='
IDENTIFIER i
OP_ADD '+'
NUM_INT 1
EOL
RIGHT_BRACE '}'
EOL
RIGHT_BRACE '}'
EOL
RIGHT_BRACE '}'
END_OF_FILE
