EOL
KEYWORD import
STRING_LITERAL ifj25
KEYWORD for
KEYWORD ifj
EOL
KEYWORD class
IDENTIFIER Program
LEFT_BRACE '{'
EOL
EOL
KEYWORD static
IDENTIFIER main
LEFT_PAREN '('
RIGHT_PAREN ')'
LEFT_BRACE '{'
EOL
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
STRING_LITERAL Zadejte cislo pro vypocet faktorialu

RIGHT_PAREN ')'
EOL
KEYWORD var
IDENTIFIER a
EOL
IDENTIFIER a
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER read_num
LEFT_PAREN '('
RIGHT_PAREN ')'
EOL
KEYWORD if
LEFT_PAREN '('
IDENTIFIER a
OP_NOT_EQUALS '!='
KEYWORD null
RIGHT_PAREN ')'
LEFT_BRACE '{'
EOL
KEYWORD if
LEFT_PAREN '('
IDENTIFIER a
OP_LESS_THAN '<'
NUM_INT 0
RIGHT_PAREN ')'
LEFT_BRACE '{'
EOL
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
STRING_LITERAL Faktorial 
RIGHT_PAREN ')'
EOL
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
IDENTIFIER a
RIGHT_PAREN ')'
EOL
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
STRING_LITERAL  nelze spocitat

RIGHT_PAREN ')'
EOL
RIGHT_BRACE '}'
KEYWORD else
LEFT_BRACE '{'
EOL
KEYWORD var
IDENTIFIER vysl
EOL
IDENTIFIER vysl
OP_ASSIGN '='
NUM_INT 1
EOL
KEYWORD while
LEFT_PAREN '('
IDENTIFIER a
OP_GREATER_THAN '>'
NUM_INT 0
RIGHT_PAREN ')'
LEFT_BRACE '{'
EOL
IDENTIFIER vysl
OP_ASSIGN '='
IDENTIFIER vysl
OP_MUL '*'
IDENTIFIER a
EOL
IDENTIFIER a
OP_ASSIGN '='
IDENTIFIER a
OP_SUB '-'
NUM_INT 1
EOL
RIGHT_BRACE '}'
EOL
IDENTIFIER vysl
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER floor
LEFT_PAREN '('
IDENTIFIER vysl
RIGHT_PAREN ')'
EOL
IDENTIFIER vysl
OP_ASSIGN '='
KEYWORD ifj
DOT
IDENTIFIER str
LEFT_PAREN '('
IDENTIFIER vysl
RIGHT_PAREN ')'
EOL
IDENTIFIER vysl
OP_ASSIGN '='
STRING_LITERAL Vysledek: 
OP_ADD '+'
IDENTIFIER vysl
OP_ADD '+'
STRING_LITERAL 

EOL
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
IDENTIFIER vysl
RIGHT_PAREN ')'
EOL
RIGHT_BRACE '}'
EOL
RIGHT_BRACE '}'
KEYWORD else
LEFT_BRACE '{'
EOL
KEYWORD ifj
DOT
IDENTIFIER write
LEFT_PAREN '('
STRING_LITERAL Faktorial pro null nelze spocitat

RIGHT_PAREN ')'
EOL
RIGHT_BRACE '}'
EOL
RIGHT_BRACE '}'
EOL
RIGHT_BRACE '}'
EOL
END_OF_FILE
